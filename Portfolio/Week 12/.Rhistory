auc <- auc@y.values[[1]]
auc
reducedmodel2 <- glm(died ~ surgerytype*cognitivedecline*cancer*autoimmune*bloodpressure*temperature*creatinelevels*trauma , data = Exam3Q1, family = "binomial")
summary(reducedmodel2)
reducedmodel2 <- glm(died ~ surgerytype*autoimmune*bloodpressure*temperature*creatinelevels*trauma , data = Exam3Q1, family = "binomial")
summary(reducedmodel2)
reducedmodel <- glm(died ~ surgerytype + cognitivedecline + cancer + autoimmune + transferedin + age + bloodpressure + temperature + creatinelevels + kg + nolifesupportorder + trauma, data = Exam3Q1, family = "binomial")summary(reducedmodel2)
reducedmodel2 <- glm(died ~ surgerytype + cognitivedecline + cancer + autoimmune + transferedin + age + bloodpressure + temperature + creatinelevels + kg + nolifesupportorder + trauma, data = Exam3Q1, family = "binomial")
summary(reducedmodel2)
pR2(reducedmodel2)
predict <- predict(reducedmodel2, type = "response")
d <- na.exclude(Exam3Q1)
rpred <- prediction(predict, d$died, )
rperf <- performance(rpred, 'tpr', 'fpr')
plot(rperf, colorize = TRUE)
auc <- performance(rpred, measure = "auc")
auc <- auc@y.values[[1]]
auc
predict <- predict(reducedmodel, type = "response")
d <- na.exclude(Exam3Q1)
rpred <- prediction(predict, d$died, )
rperf <- performance(rpred, 'tpr', 'fpr')
plot(rperf, colorize = TRUE)
auc <- performance(rpred, measure = "auc")
auc <- auc@y.values[[1]]
auc
model <- glm(died ~ severe + cognitivedecline + depression + cancer + autoimmune + transferedin + age + sex + yearseducation + bloodpressure + temperature + creatinelevels + sodiumlevels + urineweight + surgerytype + kg + nolifesupportorder + insurancetype + resp + infection + trauma + race + income, data = Exam3Q1, family = "binomial")
summary(model)
vif(reducedmodel)
pR2(reducedmodel)
#let's see how things are distributed
table(Exam3Q1$died, Exam3Q1$surgerytype)
predict <- predict(reducedmodel, type = "response")
d <- na.exclude(Exam3Q1)
rpred <- prediction(predict, d$died, )
rperf <- performance(rpred, 'tpr', 'fpr')
plot(rperf, colorize = TRUE)
auc <- performance(rpred, measure = "auc")
auc <- auc@y.values[[1]]
auc
reducedmodel2 <- glm(died ~ surgerytype, data = Exam3Q1, family = "binomial")
summary(reducedmodel2)
pR2(reducedmodel2)
predict <- predict(reducedmodel2, type = "response")
d <- na.exclude(Exam3Q1)
rpred <- prediction(predict, d$died, )
rpred <- prediction(predict, d$died, )
rperf <- performance(rpred, 'tpr', 'fpr')
plot(rperf, colorize = TRUE)
auc <- performance(rpred, measure = "auc")
auc <- auc@y.values[[1]]
auc
install.packages("treatSens")
library(Matching)
library(MatchIt)
library(dplyr)
library(twang)
library(survey)
library(optmatch)
library(party)
library(rgenoud)
library(rbounds)
library(ggplot2)
library(treatSens)
library(car)
library(moments)
library(Matching)
library(MatchIt)
library(dplyr)
library(twang)
library(survey)
library(optmatch)
library(party)
library(rgenoud)
library(rbounds)
library(ggplot2)
library(treatSens)
library(car)
library(moments)
install.packages("treatSens")
library(treatSens)
library(Matching)
library(MatchIt)
library(dplyr)
library(twang)
library(survey)
library(optmatch)
library(party)
library(rgenoud)
library(rbounds)
library(ggplot2)
library(treatSens)
library(car)
library(moments)
library(readxl)
Exam3Q1 <- read_excel("C:/Users/Richy/Downloads/Exam3Q1.xlsx")
View(Exam3Q1)
str(Exam3Q1)
library(readxl)
Exam3Q1 <- read_excel("C:/Users/Richy/Downloads/Exam3Q1.xlsx")
View(Exam3Q1)
str(Exam3Q1)
Exam3Q1$died <- factor(Exam3Q1$died)
Exam3Q1$severe <- factor(Exam3Q1$severe)
Exam3Q1$cognitivedecline <- factor(Exam3Q1$cognitivedecline)
Exam3Q1$depression <- factor(Exam3Q1$depression)
Exam3Q1$cancer <- factor(Exam3Q1$cancer)
Exam3Q1$autoimmune <- factor(Exam3Q1$autoimmune)
Exam3Q1$transferedin <- factor(Exam3Q1$transferedin)
str(Exam3Q1)
Exam3Q1$sex <- factor(Exam3Q1$sex)
Exam3Q1$race <- factor(Exam3Q1$race)
Exam3Q1$nolifesupportorder <- factor(Exam3Q1$nolifesupportorder)
Exam3Q1$resp <- factor(Exam3Q1$resp)
Exam3Q1$infection <- factor(Exam3Q1$infection)
Exam3Q1$trauma <- factor(Exam3Q1$trauma)
Exam3Q1$insurancetype <- factor(Exam3Q1$insurancetype)
Exam3Q1$surgerytype <- factor(Exam3Q1$surgerytype)
str(Exam3Q1)
psmodel <- glm(died ~ severe + cognitivedecline + depression + cancer + autoimmune + transferedin + age + sex + yearseducation + bloodpressure + temperature + creatinelevels + sodiumlevels + urineweight + surgerytype + kg + nolifesupportorder + insurancetype + resp + infection + trauma + race + income, data = Exam3Q1, family = "binomial")
summary(psmodel)
vif(psmodel)
psmodel2 <- glm(died ~ cognitivedecline + cancer + autoimmune + transferedin + age + sex + bloodpressure + temperature + creatinelevels + surgerytype + kg + nolifesupportorder + resp + trauma + income, data = Exam3Q1, family = "binomial")
summary(psmodel2)
vif(psmodel2)
dataready <- na.omit(Exam3Q1)
psf <- formula("died ~ cognitivedecline + cancer + autoimmune + transferedin + age + sex + bloodpressure + temperature + creatinelevels + surgerytype + kg + nolifesupportorder + resp + trauma + income")
str(dataready)
logit <- glm(psf, family = "binomial", data = dataready)
dataready$ps <- fitted(logit)
dataready$ps
dataready %>%
ggplot(aes(x = ps)) +
geom_histogram(color = "white") +
facet_wrap(~died)
#logging the data. create distance
dataready$logps <- log(dataready$ps/(1- dataready$ps))
str(Exam3Q1)
str(dataready)
stratified <- matchit(psf, data = dataready, distance = dataready$ps, method = "subclass", sub.by = "treat", subclass = 2)
stratumworking <- match.data(stratified)
check <- summary(stratified, standardize = TRUE)
dataready$died <- as.numeric(as.character(dataready$died))
dataready$severe <- as.numeric(as.character(dataready$severe))
dataready$cognitivedecline <- as.numeric(as.character(dataready$cognitivedecline))
dataready$depression <- as.numeric(as.character(dataready$depression))
dataready$cancer <- as.numeric(as.character(dataready$cancer))
dataready$autoimmune <- as.numeric(as.character(dataready$autoimmune))
dataready$transferedin <- as.numeric(as.character(dataready$transferedin))
dataready$nolifesupportorder <- as.numeric(as.character(dataready$nolifesupportorder))
dataready$sex <- as.numeric(as.character(dataready$sex))
dataready$surgerytype <- as.numeric(as.character(dataready$surgerytype))
dataready$insurancetype <- as.numeric(as.character(dataready$insurancetype))
dataready$resp <- as.numeric(as.character(dataready$resp))
dataready$infection <- as.numeric(as.character(dataready$infection))
dataready$trauma <- as.numeric(as.character(dataready$trauma))
dataready$race <- as.numeric(as.character(dataready$race))
str(dataready)
stratified <- matchit(psf, data = dataready, distance = dataready$ps, method = "subclass", sub.by = "treat", subclass = 2)
stratumworking <- match.data(stratified)
check <- summary(stratified, standardize = TRUE)
stdmeandifferences <- data.frame(check$q.table[,3,])
summary(stdmeandifferences)
design <- svydesign(id = ~0, data = stratumworking)
ntreat <- data.frame(table(stratumworking$subclass[stratumworking$died == 1]))
names(ntreat) <- c("subclass", "N.1s")
ncontrol <- data.frame(table(stratumworking$subclass[stratumworking$died == 0]))
names(ncontrol) <- c("subclass", "N.0s")
scounts <- merge(ntreat, ncontrol)
stratumworking <- merge(stratumworking, scounts)
propt <- svymean(~factor(died), design)
stratumworking$weights <- with(stratumworking, ifelse(surgerytype == 1, 1, stratumworking$N.1s*propt[1]/ stratumworking$N.0s*propt[2]))
xtabs(~weights  +subclass, stratumworking)
stratumworking$ATTwFinal  <- stratumworking$weights /mean(stratumworking$weights)
bal.stat(stratumworking, estimand = "ATT", w.all = stratumworking$ATTwFinal, vars = cbind("cognitivedecline", "cancer", "autoimmune", "transferedin", "age" ,"sex", "bloodpressure" ,"temperature", "creatinelevels", "surgerytype", "kg", "nolifesupportorder", "resp", "trauma", "income"), sampw = 1, get.ks = FALSE,  treat.var = "died", multinom = FALSE)
design <- svydesign(ids = ~0, weights = stratumworking$ATTwFinal, data = stratumworking)
design <- as.svrepdesign(design, type = c("bootstrap"), replicates = 50)
sensitivity <- treatSens(surgerytype ~ factor(died) + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = stratumworking$AttwFinal, data = stratumworking)
summary(sensitivity)
sensitivity <- treatSens(surgerytype ~ died + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = stratumworking$AttwFinal, data = stratumworking)
sensitivity <- treatSens(died ~ surgerytype + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = stratumworking$AttwFinal, data = stratumworking)
sensitivity <- treatSens(surgerytype ~ factor(died) + ps + I((ps)^2) + I((ps)^3), trt.family = binomial, grid.dim = c(5,5), nsim = 20, weights = stratumworking$AttwFinal, data = stratumworking)
sensitivity <- treatSens(surgerytype ~ factor(died) + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "gaussian"), grid.dim = c(5,5), nsim = 20, weights = stratumworking$AttwFinal, data = stratumworking)
sensitivity <- treatSens(surgerytype ~ factor(died) + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = stratumworking$AttwFinal, data = stratumworking)
sensitivity <- treatSens(surgerytype ~ died + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = stratumworking$AttwFinal, data = stratumworking)
dataready$ATTw <- with(dataready, ifelse(surgerytype == 1, 1, ps/(1-ps)))
with(dataready, by(ATTw, trainingtaken, summary))
with(dataready, by(ATTw, surgerytype, summary))
stratumworking$weights <- with(stratumworking, ifelse(died == 1, 1, stratumworking$N.1s*propt[1]/ stratumworking$N.0s*propt[2]))
xtabs(~weights  +subclass, stratumworking)
stratumworking$ATTwFinal  <- stratumworking$weights /mean(stratumworking$weights)
bal.stat(stratumworking, estimand = "ATT", w.all = stratumworking$ATTwFinal, vars = cbind("cognitivedecline", "cancer", "autoimmune", "transferedin", "age" ,"sex", "bloodpressure" ,"temperature", "creatinelevels", "surgerytype", "kg", "nolifesupportorder", "resp", "trauma", "income"), sampw = 1, get.ks = FALSE,  treat.var = "died", multinom = FALSE)
design <- svydesign(ids = ~0, weights = stratumworking$ATTwFinal, data = stratumworking)
design <- as.svrepdesign(design, type = c("bootstrap"), replicates = 50)
sensitivity <- treatSens(surgerytype ~ died + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = stratumworking$AttwFinal, data = stratumworking)
dataready$ATTw <- with(dataready, ifelse(died == 1, 1, ps/(1-ps)))
with(dataready, by(ATTw, died, summary))
dataready$correctedweights <- with(dataready, ifelse(died == 1, mean(ps)/ps, mean(1-ps)/(1-ps)))
with(dataready, by(correctedweights, died, summary))
dataready$ATTw <- with(dataready, ifelse(died == 1, 1, ps/(1-ps)))
with(dataready, by(ATTw, died, summary))
dataready$correctedweights <- with(dataready, ifelse(died == 1, mean(ps)/ps, mean(1-ps)/(1-ps)))
with(dataready, by(correctedweights, died, summary))
model1 <- glm (surgerytype ~ died, weights = ATTw, data = dataready)
model2 <- glm (surgerytype ~ died, weights = ATTw, data = dataready, family = "quasibinomial")
design <- svydesign(ids = ~0, weights = dataready$correctedweights, data = dataready)
design <- as.svrepdesign(design, type = c("bootstrap"), replicates = 5000)
model <- svyglm(died ~ cognitivedecline + cancer + autoimmune + transferedin + age + sex + bloodpressure + temperature + creatinelevels + surgerytype + kg + nolifesupportorder + resp + trauma + income, design = design, family = gaussian())
summary(model)
sensitivity <- treatSens(surgerytype ~ factor(died) + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = dataready$correctedweights, data = dataready)
sensitivity <- treatSens(as.numeric(surgerytype) ~ factor(died) + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = dataready$correctedweights, data = dataready)
sensitivity <- treatSens(as.numeric(surgerytype) ~ as.numeric(died) + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = dataready$correctedweights, data = dataready)
sensitivity <- treatSens(surgerytype ~ died + ps + I((ps)^2) + I((ps)^3), trt.family = binomial(link = "probit"), grid.dim = c(5,5), nsim = 20, weights = dataready$correctedweights, data = dataready)
knitr::opts_chunk$set(echo = TRUE)
#Installing packages
install.packages("dplyr")
install.packages("ggplot2")
#Loading packages
library("dplyr")
library("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
gapminder <- read.csv("C:/Users/Richy/Desktop/Harrisburg University/Exploratory Data Analytics/FinalProject/ANLY506_RichyVarghese_FinalProject/Data/Data_EDAAssignment/gapminder.csv")
View(gapminder)
gapminder <- read.csv("C:/Users/Richy/Desktop/Harrisburg University/Exploratory Data Analytics/FinalProject/ANLY506_RichyVarghese_FinalProject/Data/Data_EDAAssignment/gapminder.csv", header = TRUE)
str(gutten)
#Checking the data structure
str(gapminder)
#Country, Year and Region should be factors, while Life, Population and Income should be numericm hence converting the data to the right data types
gapminder$Year <- factor(gapminder$Year)
str(gapminder)
gapminder$population <- as.numeric(gapminder$population)
str(gapminder)
gapminder <- read.csv("C:/Users/Richy/Desktop/Harrisburg University/Exploratory Data Analytics/FinalProject/ANLY506_RichyVarghese_FinalProject/Data/Data_EDAAssignment/gapminder.csv", header = TRUE)
#Checking the data structure
str(gapminder)
#Country, Year and Region should be factors, while Life, Population and Income should be numericm hence converting the data to the right data types
gapminder$Year <- factor(gapminder$Year)
View(gapminder)
gapminder$population <- as.numeric(as.character(gapminder$population))
View(gapminder)
#Now, all data types seem to be correct
#Looking at the top and bottom few rows of the dataset
head(gapminder)
tail(gapminder)
#Now, all data types seem to be correct
#Looking at the top and bottom few rows of the dataset
head(gapminder)
tail(gapminder)
#There are NAs in population and income columns, hence checking count of NAs in every column
colSums(is.na(gapminder))
table(gapminder$population)
summary(gapminder)
gapminder_new <- gapminder %>% filter(Year >= 1950 && Year<=2015)
gapminder_new <- gapminder %>% filter(Year >= 1950 & Year<=2015)
gapminder_new <- gapminder %>% filter(Year > 1949 && Year<=2016)
library("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
gapminder_new <- gapminder %>% filter(Year >= 1950 && Year <= 2015)
gapminder$Year <- as.numeric(as.character(gapminder$Year))
str(gapminder)
#On further exploring the data, using Excel, there seems to be missing data before 1950s, hence taking a subset of data from 1950 to 2015 for all countries
gapminder_new <- gapminder %>% filter(Year >= 1950 && Year <= 2015)
View(gapminder_new)
gapminder_new <- gapminder %>% filter(Year >= 1950 || Year <= 2015)
View(gapminder_new)
gapminder_new <- gapminder %>% filter(Year >= 1950 && Year <= 2015)
View(gapminder_new)
gapminder_new <- gapminder %>% filter(Year > 1949 && Year < 2016)
str(gapminder)
gapminder_new <- gapminder %>% filter(Year >=  1950)
View(gapminder_new)
#Looking at NAs in every column
colSums(is.na(gapminder_new))
#Getting the descriptive summary of the dataset
summary(gapminder_new)
#Remove NAs from the new data set
na.omit(gapminder_new)
View(gapminder_new)
gapminder_new <- na.omit(gapminder_new)
summary(gapminder_new)
#Mean and median life expectancy for each region
mean_life <- round(mean(gapminder_new$life), digits=3)
median_life <- round(median(gapminder_new$life), digits=3)
View(gapminder_new)
View(gapminder_new %>% group_by(region) %>% summarise(mean(life), median(life)))
View(gapminder_new)
ggplot(gapminder_new, aes(x = region, y = life)) + facet_wrap(~year) +
geom_boxplot(outlier.colour = "red") +
ggtitle("Box plots of life expectancy for each region 1950-2015") +
geom_jitter(position = position_jitter(width = 0.09, height = 0), alpha = 1/10)
library("ggplot2")
ggplot(gapminder_new, aes(x = region, y = life)) + facet_wrap(~year) +
geom_boxplot(outlier.colour = "red") +
ggtitle("Box plots of life expectancy for each region 1950-2015") +
geom_jitter(position = position_jitter(width = 0.09, height = 0), alpha = 1/10)
ggplot(gapminder_new, aes(x = region, y = life)) + facet_wrap(~Year) +
geom_boxplot(outlier.colour = "red") +
ggtitle("Box plots of life expectancy for each region 1950-2015") +
geom_jitter(position = position_jitter(width = 0.09, height = 0), alpha = 1/10)
ggplot(gapminder_new, aes(x = region, y = life)) +
geom_boxplot(outlier.colour = "red") +
ggtitle("Box plots of life expectancy for each region 1950-2015") +
geom_jitter(position = position_jitter(width = 0.09, height = 0), alpha = 1/10)
ggplot(gapminder_new, aes(x = region, y = life)) +
geom_boxplot(outlier.colour = "red") +
ggtitle("Box plots of life expectancy for each region 1950-2015")
ggplot(gapminder_new, aes(x = region, y = life)) + geom_boxplot(outlier.colour = "red") + ggtitle("Box plots of life expectancy for each region 1950-2015")
ggplot(gapminder_new, aes(x = Year, y = life, group = region)) +
geom_line()+
geom_point()
ggplot(gapminder_new, aes(x = Year, y = life, group = region)) +
geom_line()
ggplot(gapminder_new, aes(x = Year, y = life, group = region)) +
geom_line(aes(color=region))+
geom_point(aes(color=region))
ggplot(gapminder_new, aes(x = Year, y = life, group = region)) +
geom_line(aes(color=region))
ggplot(gapminder_new, aes(x = Year, y = mean(life), group = region)) +
geom_line(aes(color=region))+
geom_point(aes(color=region))
ggplot(gapminder_new, aes(x = Year, y = life, group = region)) +
geom_line(aes(color=region))+
geom_point(aes(color=region))
ggplot(gapminder_new, aes(x = Year, y = life, group = region)) + geom_freqpoly(binwidth = 500)
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point(shape=1)
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE)
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point(shape=1) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE)
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point(shape=1) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE)
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE)
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
install.packages("wesanderson")
library(wesanderson)
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +scale_fill_manual(values=wes_palette(n=3, name="GrandBudapest"))
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) +scale_fill_manual(values=wes_palette(n=3, name="Darjeeling"))
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_fill_manual(values=wes_palette(n=3, name="Darjeeling"))
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_fill_manual(values=wes_palette(n=6, name="Darjeeling"))
install.packages("RColorBrewer")
library("RColorBrewer")
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_brewer(palette="Dark2")
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_brewer(palette="Oranges")
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_brewer(palette="Pastel2")
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_brewer(palette="Paired")
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_brewer(palette="Spectral")
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) +
geom_point() + # Use a slightly darker palette than normal
geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_brewer(palette="Dark2")
#Trend of life expectancy for each region
ggplot(gapminder_new, aes(x=Year, y=life, color=region)) + geom_point() + geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_brewer(palette="Dark2") + ggtitle("Trend of life expectancy for each region")
View(gapminder_new)
mean_pop <- round(mean(gapminder_new$population), digits=3)
median_pop <- round(median(gapminder_new$population), digits=3)
View(gapminder_new %>% group_by(region) %>% summarise(mean(population), median(population)))
ggplot(gapminder_new, aes(x = region, y = population)) + geom_boxplot(outlier.colour = "red") + ggtitle("Box plots of life expectancy for each region 1950-2015")
ggplot(gapminder_new, aes(x = region, y = population)) + geom_boxplot() + ggtitle("Box plots of population for each region 1950-2015")
ggplot(gapminder_new, aes(x = region, y = population)) + geom_boxplot(v) + ggtitle("Box plots of population for each region 1950-2015")
ggplot(gapminder_new, aes(x = region, y = population)) + geom_boxplot(outlier.shape = NA) + ggtitle("Box plots of population for each region 1950-2015")
ggplot(gapminder_new, aes(x=Year, y=population, color=region)) + geom_point() + geom_smooth(method=lm, se=FALSE, fullrange=TRUE) + scale_color_brewer(palette="Dark2") + ggtitle("Trend of population for each region 1950-2015")
View(gapminder_new)
mean_pop <- round(mean(gapminder_new$population), digits=3)
median_pop <- round(median(gapminder_new$population), digits=3)
View(gapminder_new %>% group_by(region) %>% summarise(mean(population), median(population)))
View(gapminder_new)
ggplot(gapminder_new, aes(x = Year, y = life, color = region)) +
geom_point() + geom_smooth()
newdat <- aggregate(life ~ region + Year, data = gapminder_new, mean)
ggplot(newdat, aes(x = Year, y = life)) + geom_line(aes(color = region))
newdat <- aggregate(life ~ region + Year, data = gapminder_new, mean)
ggplot(newdat, aes(x = Year, y = life)) + geom_line(aes(color = region)) + ggtitle("Trend of life expectancy for each region 1950-2015")
#Trend of life expectancy for each region
newdata <- aggregate(life ~ region + Year, data = gapminder_new, mean)
ggplot(newdata, aes(x = Year, y = life)) + geom_line(aes(color = region)) + ggtitle("Trend of life expectancy for each region 1950-2015")
ggplot(gapminder_new, aes(x = life)) + geom histogram()
ggplot(gapminder_new, aes(x = life)) + geom_histogram()
ggplot(gapminder_new, aes(x = income, y = life)) + geom_point()
ggplot(gapminder_new, aes(x = log(income), y = life)) + geom_point()
ggplot(gapminder_new, aes(x = income, y = life)) + geom_point()
ggplot(gapminder_new, aes(x = population, y = life)) + geom_point()
ggplot(gapminder_new, aes(x = income, y = life, color = region)) +
geom_point()
ggplot(gapminder_new, aes(x = income, y = life, color = region)) +
geom_point()
ggplot(gapminder_new, aes(x = income, y = life, color = region)) +
geom_point() + facet_wrap(~Year+region)
ggplot(gapminder_new, aes(x = income, y = life)) +
geom_point(aes(colour = region, size = population)) +
facet_wrap(~Year)
ggplot(gapminder_new, aes(x = income, y = life)) +
geom_point(aes(colour = region, size = population))
ggplot(gapminder_new, aes(x = income, y = life)) + geom_point()
ggplot(gapminder_new, aes(x = income, y = population)) + geom_point()
ggplot(gapminder_new, aes(x = population, y = life)) + geom_point()
ggplot(gapminder_new, aes(x = population, y = income)) + geom_point()
ggplot(gapminder_new, aes(y = population, x = income)) + geom_point()
install.packages("tidyverse")
install.packages("cluster")
install.packages("factoextra")
library("tidyverse")
library("cluster")
library("factoextra")
df <- gapminder_new %>% filter(Year == 1995)
df <- na.omit(df)
distance <- get_dist(df)
fviz_dist(distance, gradient = list(low = "pink", mid = "white", high = "red"))
k <- kmeans(df, centers = 2, nstart = 25)
str(k)
k <- kmeans(df, centers = 2, nstart = 25)
df <- USArrests
View(df)
df <- gapminder_new %>% filter(Year == 1995) %>% select(life, population, income)
View(df)
df <- gapminder_new %>% filter(Year == 1995) %>% select(Country, life, population, income)
View(df)
df <- na.omit(df)
distance <- get_dist(df)
distance
fviz_dist(distance, gradient = list(low = "pink", mid = "white", high = "red"))
k <- kmeans(df, centers = 10, nstart = 25)
str(k)
k <- kmeans(na.omit(df), centers = 10, nstart = 25)
df <- gapminder_new %>% filter(Year == 1995) %>% select(Country, life, population, income)
df <- na.omit(df)
k <- kmeans(na.omit(df), centers = 10, nstart = 25)
View(df)
df <- USArrests
View(df)
df <- gapminder_new %>% filter(Year == 1995) %>% select(Country, life, population, income)
row.names(df) <- df[,1]
View(df)
df <- df %>% select(life, population, income)
View(df)
df <- na.omit(df)
distance <- get_dist(df)
fviz_dist(distance, gradient = list(low = "pink", mid = "white", high = "red"))
k <- kmeans(na.omit(df), centers = 10, nstart = 25)
str(k)
fviz_cluster(k, data = df)
df <- gapminder_new %>% filter(Year == 2015) %>% select(Country, life, population, income)
row.names(df) <- df[,1]
df <- df %>% select(life, population, income)
df <- na.omit(df)
distance <- get_dist(df)
fviz_dist(distance, gradient = list(low = "pink", mid = "white", high = "red"))
k <- kmeans(na.omit(df), centers = 10, nstart = 25)
fviz_cluster(k, data = df)
k <- kmeans(na.omit(df), centers = 50, nstart = 25)
fviz_cluster(k, data = df)
k <- kmeans(na.omit(df), centers = 20, nstart = 100)
fviz_cluster(k, data = df)
k <- kmeans(na.omit(df), centers = 5, nstart = 100)
fviz_cluster(k, data = df)
k <- kmeans(na.omit(df), centers = 3, nstart = 100)
fviz_cluster(k, data = df)
#Determining optimal clusters
#Elbow method
set.seed(123)
#Function to compute total within-cluster sum of square
wss <- function(k) {kmeans(df, k, nstart = 10 )$tot.withinss}
# Computing and plotting wss for k = 1 to k = 15
k.values <- 1:15
#Extracting wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values, type="b", pch = 19, frame = FALSE, xlab="Number of clusters K", ylab="Total within-clusters sum of squares")
plot(k.values, wss_values, type="b", pch = 19, frame = FALSE, xlab="Number of clusters K", ylab="Total within-clusters sum of squares")
avg_sil <- function(k) {km.res <- kmeans(df, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, dist(df))
mean(ss[, 3])}
k.values <- 2:15
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(k.values, avg_sil_values, type = "b", pch = 19, frame = FALSE, xlab = "Number of clusters K", ylab = "Average Silhouettes")
plot(k.values, avg_sil_values, type = "b", pch = 19, frame = FALSE, xlab = "Number of clusters K", ylab = "Average Silhouettes")
fviz_cluster(k, data = df)
